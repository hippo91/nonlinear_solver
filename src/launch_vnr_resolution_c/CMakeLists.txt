include( PythonUtilities.cmake )

set( PYTHON_MODULE_NAME "vnr_internal_energy" CACHE STRING "Name of the python module to generate" )

# The library created/used by python should follow a specific pattern which will be set by setup.py
# If not generated via setup.py doesn't take care
set( PYTHON_LIBRARY_NAME "_${PYTHON_MODULE_NAME}.so" CACHE STRING "Name of the library that will be used by setup.py" )

# Need SWIG
find_package( SWIG REQUIRED )

# Need Python
find_package( Python3 COMPONENTS Interpreter Development )
if( NOT Python3_Interpreter_FOUND )
    # Stop the process if the interpreter is not found
    message( FATAL_ERROR "Python3 interpreter cannot be found!" ) 
endif()
if( NOT Python3_Development_FOUND )
    search_python3_include_dir()
    message( STATUS "Found Python3 Include Directory : ${Python3_INCLUDE_DIRS}" )
endif()

# Need Numpy
search_numpy_include_dir()
message( STATUS "Found Numpy: ${NUMPY_INCLUDE_DIR}" )

include( UseSWIG )
# Override the module name found in the swig source (.i) file
# https://gitlab.kitware.com/cmake/cmake/issues/18374
list( APPEND CMAKE_SWIG_FLAGS "-module;${PYTHON_MODULE_NAME}" )
set_property( SOURCE launch_vnr_resolution.i PROPERTY USE_TARGET_INCLUDE_DIRECTORIES TRUE )

if( CMAKE_VERSION VERSION_LESS 3.13 )
    set( UseSWIG_TARGET_NAME_PREFERENCE STANDARD )
    # Otherwise the swig_add_library will create a target which name is not the one
    # passed to the command but a legacy one
endif()

swig_add_library( ${PYTHON_MODULE_NAME}
    TYPE SHARED
    LANGUAGE Python
    SOURCES launch_vnr_resolution.i
    OUTPUT_DIR "${CMAKE_CURRENT_LIST_DIR}"
    OUTFILE_DIR "${CMAKE_CURRENT_LIST_DIR}"
)

target_include_directories( ${PYTHON_MODULE_NAME}
    PRIVATE
        ${Python3_INCLUDE_DIRS}
        ${NUMPY_INCLUDE_DIR}
)

target_link_libraries( ${PYTHON_MODULE_NAME}
    PRIVATE
        launch_vnr_resolution
        array
        newton
        functions
        incrementation
        criterions
        eos
)

if( CMAKE_VERSION VERSION_LESS 3.13 )
    # CMake versions prior to 3.13 seem to have difficulties to enrich SWIG_INCLUDE_DIRECTORIES
    # with the include_directories transitively declared via target_link_libraries
    get_property( LAUNCH_VNR_RESOLUTION_INCLUDE_DIR TARGET launch_vnr_resolution PROPERTY INCLUDE_DIRECTORIES )
    get_property( EOS_INCLUDE_DIR TARGET eos PROPERTY INCLUDE_DIRECTORIES )
    set( MANUAL_INCLUDE_DIR "${LAUNCH_VNR_RESOLUTION_INCLUDE_DIR};${EOS_INCLUDE_DIR}")
    set_property( TARGET ${PYTHON_MODULE_NAME} PROPERTY SWIG_INCLUDE_DIRECTORIES "${MANUAL_INCLUDE_DIR}" )
endif()

# This command is usefull only when cmake is called via setup.py.
# For example the library generated by swig is _vnr_internal_energy.so.
# This command will copy this library into the src/launch_vnr_resolution_c directory
# where the python wrapper vnr_internal_energy.py has been also generated.
# This package is then copied/installed by pip during the installation process.
# Last step of the command is to rename the generated library into a python/pip 
# compliant name where the suffix '.cpython-37m-x86_64-linux-gnu.so' will be added
add_custom_command( TARGET ${PYTHON_MODULE_NAME}
    POST_BUILD
    COMMAND ${CMAKE_COMMAND} -E copy "_${PYTHON_MODULE_NAME}.so" "${CMAKE_CURRENT_LIST_DIR}/"
    COMMAND ${CMAKE_COMMAND} -E rename "_${PYTHON_MODULE_NAME}.so" "${PYTHON_LIBRARY_NAME}" 
    WORKING_DIRECTORY "${CMAKE_LIBRARY_OUTPUT_DIRECTORY}"
    COMMENT
"Working inside ${CMAKE_LIBRARY_OUTPUT_DIRECTORY}
copy _${PYTHON_MODULE_NAME}.so to ${CMAKE_CURRENT_LIST_DIR}/
rename _${PYTHON_MODULE_NAME}.so to ${PYTHON_LIBRARY_NAME}" 
)